type User = 
 record {
   bio: Bio__1;
   callerid: principal;
   created_at: int;
   updated_at: int;
 };
type Result_3 = 
 variant {
   err: Error;
   ok: bool;
 };
type Result_2 = 
 variant {
   err: Error;
   ok: Post;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: User;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type Post_Info__1 = 
 record {
   body: text;
   title: opt text;
 };
type Post_Info = 
 record {
   body: text;
   title: opt text;
 };
type Post = 
 record {
   active: bool;
   author: nat;
   created_at: int;
   info: Post_Info__1;
   updated_at: int;
 };
type Error = 
 variant {
   NotAuthorized;
   PostAlreadyExists;
   PostNotFound;
   UserAlreadyExists;
   UserNotFound;
 };
type Bio__1 = 
 record {
   email: opt text;
   phone_number: opt text;
   username: text;
 };
type Bio = 
 record {
   email: opt text;
   phone_number: opt text;
   username: text;
 };
service : {
  activePost: (nat) -> (Result);
  checkActivePost: (nat) -> (Result_3);
  createPost: (nat, Post_Info) -> (Result);
  createUser: (Bio) -> (Result);
  deletePost: (nat) -> (Result);
  deleteUser: (nat) -> (Result);
  listPosts: () -> (vec Post);
  listUsers: () -> (vec User);
  readPost: (nat) -> (Result_2);
  readUser: (nat) -> (Result_1);
  updatePost: (nat, Post_Info) -> (Result);
  updateUser: (nat, Bio) -> (Result);
}
